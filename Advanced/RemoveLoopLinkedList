#include <bits/stdc++.h>
using namespace std;

struct Node {
    int key;
    struct Node* next;
};

Node* newNode(int key)
{
    Node* temp = new Node;
    temp->key = key;
    temp->next = NULL;
    return temp;
}

void printList(Node* head)
{
    while (head != NULL) {
        cout << head->key << " ";
        head = head->next;
    }

}

void detectAndRemoveLoop(Node* head)
{
    //One node without self loop or no nodes
    if (head == NULL || head->next == NULL)
        return;

    Node *slow = head, *fast = head;

    slow = slow->next;
    fast = fast->next->next;

   while (fast && fast->next) {
        if (slow == fast)
            break;
        slow = slow->next;
        fast = fast->next->next;
    }

    //if loop is present
    if (slow == fast) {
        slow = head;
        while (slow->next != fast->next) {
            slow = slow->next;
            fast = fast->next;
        }

        //remove loop
        fast->next = NULL;
    }
}


int main()
{
    Node* head = newNode(5);
    head->next = head;
    head->next = newNode(1);
    head->next->next = newNode(3);
    head->next->next->next = newNode(2);
    head->next->next->next->next = newNode(7);

    //creating loop
    head->next->next->next->next->next = head->next->next;

    detectAndRemoveLoop(head);

    printf("Linked List after removal of loop \n");
    printList(head);

    return 0;
}
